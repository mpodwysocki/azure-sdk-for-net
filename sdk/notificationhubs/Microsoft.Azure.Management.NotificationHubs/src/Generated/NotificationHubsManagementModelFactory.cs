// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.Azure.Management.NotificationHubs.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class NotificationHubsManagementModelFactory
    {
        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="display"> The object that represents the operation. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, OperationDisplay display = null)
        {
            return new Operation(name, display);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> Service provider: Microsoft.NotificationHubs. </param>
        /// <param name="resource"> Resource on which the operation is performed: Invoice, etc. </param>
        /// <param name="operation"> Operation type: Read, write, delete, etc. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null)
        {
            return new OperationDisplay(provider, resource, operation);
        }

        /// <summary> Initializes a new instance of Resource. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = null, string name = null, string type = null, string location = null, IDictionary<string, string> tags = null, Sku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new Resource(id, name, type, location, tags, sku);
        }

        /// <summary> Initializes a new instance of NamespaceCreateOrUpdateParameters. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <param name="namePropertiesName"> The name of the namespace. </param>
        /// <param name="provisioningState"> Provisioning state of the Namespace. </param>
        /// <param name="region"> Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe. </param>
        /// <param name="metricId"> Identifier for Azure Insights metrics. </param>
        /// <param name="status"> Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting. </param>
        /// <param name="createdAt"> The time the namespace was created. </param>
        /// <param name="updatedAt"> The time the namespace was updated. </param>
        /// <param name="serviceBusEndpoint"> Endpoint you can use to perform NotificationHub operations. </param>
        /// <param name="subscriptionId"> The Id of the Azure subscription associated with the namespace. </param>
        /// <param name="scaleUnit"> ScaleUnit where the namespace gets created. </param>
        /// <param name="enabled"> Whether or not the namespace is currently enabled. </param>
        /// <param name="critical"> Whether or not the namespace is set as Critical. </param>
        /// <param name="dataCenter"> Data center for the namespace. </param>
        /// <param name="namespaceType"> The namespace type. </param>
        /// <returns> A new <see cref="Models.NamespaceCreateOrUpdateParameters"/> instance for mocking. </returns>
        public static NamespaceCreateOrUpdateParameters NamespaceCreateOrUpdateParameters(string id = null, string name = null, string type = null, string location = null, IDictionary<string, string> tags = null, Sku sku = null, string namePropertiesName = null, string provisioningState = null, string region = null, string metricId = null, string status = null, DateTimeOffset? createdAt = null, DateTimeOffset? updatedAt = null, string serviceBusEndpoint = null, string subscriptionId = null, string scaleUnit = null, bool? enabled = null, bool? critical = null, string dataCenter = null, NamespaceType? namespaceType = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceCreateOrUpdateParameters(id, name, type, location, tags, sku, namePropertiesName, provisioningState, region, metricId, status, createdAt, updatedAt, serviceBusEndpoint, subscriptionId, scaleUnit, enabled, critical, dataCenter, namespaceType);
        }

        /// <summary> Initializes a new instance of NamespaceResource. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <param name="namePropertiesName"> The name of the namespace. </param>
        /// <param name="provisioningState"> Provisioning state of the Namespace. </param>
        /// <param name="region"> Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe. </param>
        /// <param name="metricId"> Identifier for Azure Insights metrics. </param>
        /// <param name="status"> Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting. </param>
        /// <param name="createdAt"> The time the namespace was created. </param>
        /// <param name="updatedAt"> The time the namespace was updated. </param>
        /// <param name="serviceBusEndpoint"> Endpoint you can use to perform NotificationHub operations. </param>
        /// <param name="subscriptionId"> The Id of the Azure subscription associated with the namespace. </param>
        /// <param name="scaleUnit"> ScaleUnit where the namespace gets created. </param>
        /// <param name="enabled"> Whether or not the namespace is currently enabled. </param>
        /// <param name="critical"> Whether or not the namespace is set as Critical. </param>
        /// <param name="dataCenter"> Data center for the namespace. </param>
        /// <param name="namespaceType"> The namespace type. </param>
        /// <returns> A new <see cref="Models.NamespaceResource"/> instance for mocking. </returns>
        public static NamespaceResource NamespaceResource(string id = null, string name = null, string type = null, string location = null, IDictionary<string, string> tags = null, Sku sku = null, string namePropertiesName = null, string provisioningState = null, string region = null, string metricId = null, string status = null, DateTimeOffset? createdAt = null, DateTimeOffset? updatedAt = null, string serviceBusEndpoint = null, string subscriptionId = null, string scaleUnit = null, bool? enabled = null, bool? critical = null, string dataCenter = null, NamespaceType? namespaceType = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NamespaceResource(id, name, type, location, tags, sku, namePropertiesName, provisioningState, region, metricId, status, createdAt, updatedAt, serviceBusEndpoint, subscriptionId, scaleUnit, enabled, critical, dataCenter, namespaceType);
        }

        /// <summary> Initializes a new instance of SharedAccessAuthorizationRuleProperties. </summary>
        /// <param name="rights"> The rights associated with the rule. </param>
        /// <param name="primaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="secondaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="keyName"> A string that describes the authorization rule. </param>
        /// <param name="claimType"> A string that describes the claim type. </param>
        /// <param name="claimValue"> A string that describes the claim value. </param>
        /// <param name="modifiedTime"> The last modified time for this rule. </param>
        /// <param name="createdTime"> The created time for this rule. </param>
        /// <param name="revision"> The revision number for the rule. </param>
        /// <returns> A new <see cref="Models.SharedAccessAuthorizationRuleProperties"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleProperties SharedAccessAuthorizationRuleProperties(IEnumerable<AccessRights> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, string claimType = null, string claimValue = null, string modifiedTime = null, string createdTime = null, int? revision = null)
        {
            rights ??= new List<AccessRights>();

            return new SharedAccessAuthorizationRuleProperties(rights?.ToList(), primaryKey, secondaryKey, keyName, claimType, claimValue, modifiedTime, createdTime, revision);
        }

        /// <summary> Initializes a new instance of SharedAccessAuthorizationRuleResource. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The sku of the created namespace. </param>
        /// <param name="rights"> The rights associated with the rule. </param>
        /// <param name="primaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="secondaryKey"> A base64-encoded 256-bit primary key for signing and validating the SAS token. </param>
        /// <param name="keyName"> A string that describes the authorization rule. </param>
        /// <param name="claimType"> A string that describes the claim type. </param>
        /// <param name="claimValue"> A string that describes the claim value. </param>
        /// <param name="modifiedTime"> The last modified time for this rule. </param>
        /// <param name="createdTime"> The created time for this rule. </param>
        /// <param name="revision"> The revision number for the rule. </param>
        /// <returns> A new <see cref="Models.SharedAccessAuthorizationRuleResource"/> instance for mocking. </returns>
        public static SharedAccessAuthorizationRuleResource SharedAccessAuthorizationRuleResource(string id = null, string name = null, string type = null, string location = null, IDictionary<string, string> tags = null, Sku sku = null, IEnumerable<AccessRights> rights = null, string primaryKey = null, string secondaryKey = null, string keyName = null, string claimType = null, string claimValue = null, string modifiedTime = null, string createdTime = null, int? revision = null)
        {
            tags ??= new Dictionary<string, string>();
            rights ??= new List<AccessRights>();

            return new SharedAccessAuthorizationRuleResource(id, name, type, location, tags, sku, rights?.ToList(), primaryKey, secondaryKey, keyName, claimType, claimValue, modifiedTime, createdTime, revision);
        }

        /// <summary> Initializes a new instance of ResourceListKeys. </summary>
        /// <param name="primaryConnectionString"> PrimaryConnectionString of the AuthorizationRule. </param>
        /// <param name="secondaryConnectionString"> SecondaryConnectionString of the created AuthorizationRule. </param>
        /// <param name="primaryKey"> PrimaryKey of the created AuthorizationRule. </param>
        /// <param name="secondaryKey"> SecondaryKey of the created AuthorizationRule. </param>
        /// <param name="keyName"> KeyName of the created AuthorizationRule. </param>
        /// <returns> A new <see cref="Models.ResourceListKeys"/> instance for mocking. </returns>
        public static ResourceListKeys ResourceListKeys(string primaryConnectionString = null, string secondaryConnectionString = null, string primaryKey = null, string secondaryKey = null, string keyName = null)
        {
            return new ResourceListKeys(primaryConnectionString, secondaryConnectionString, primaryKey, secondaryKey, keyName);
        }
    }
}
